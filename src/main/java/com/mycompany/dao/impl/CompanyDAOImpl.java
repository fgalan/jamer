package com.mycompany.dao.impl;

import com.mycompany.dao.InvalidPaginationParametersException;
import com.mycompany.entity.Company;
import com.mycompany.dao.CompanyDAO;
import com.mycompany.dao.CompanyNotFoundException;
import com.mycompany.dao.DuplicatedCompanyException;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import javax.persistence.*;
import java.util.List;

/**
 * Created with IntelliJ IDEA.
 * User: fermin
 * Date: 3/11/12
 * Time: 18:36
 * To change this template use File | Settings | File Templates.
 */
@Repository
public class CompanyDAOImpl implements CompanyDAO {

    @PersistenceContext
    private EntityManager em;

    public CompanyDAOImpl() {
    }

    public CompanyDAOImpl(EntityManager em) {
        this.em = em;
    }

    @Transactional
    public Company create(Company c) throws DuplicatedCompanyException {
        /* We return company as the object can be has new information after the
           persisting, typically autogenerated keys */
        try {
            // TODO fix the use of getTransaction()... if I remove them, find tests don't work
            em.getTransaction().begin();
            em.persist(c);
            em.getTransaction().commit();
        }
        catch (EntityExistsException e) {
            throw new DuplicatedCompanyException();
        }
        return c;
    }

    public Company read(String name) throws CompanyNotFoundException {
        Company co = em.find(Company.class, name);
        if (co == null)
            throw new CompanyNotFoundException();
        else
            return co;
    }

    @Transactional
    public void delete(Company c) throws CompanyNotFoundException {
        Company co = em.find(Company.class, c.getName());
        if (co == null)
            throw new CompanyNotFoundException();
        else {
            em.remove(co);
        }
    }

    public List<Company> findAll(int limit) throws InvalidPaginationParametersException {
        return findAll(limit, 0);
    }

    public List<Company> findAll(int limit, int offset) throws InvalidPaginationParametersException {
        if ((limit <= 0) || (offset < 0)) {
            throw new InvalidPaginationParametersException();
        }
        TypedQuery<Company> q = em.createNamedQuery("Company.findAll", Company.class)
                .setMaxResults(limit)
                .setFirstResult(offset);
        return q.getResultList();
    }

    public int countAll()  {
        Query q = em.createNamedQuery("Company.countAll");
        return ((Long) q.getSingleResult()).intValue();
    }

}
